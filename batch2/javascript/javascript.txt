                                JavaScript
=================================================================================
JavaScript is a client side programming language

What is client side?
Client side refers to the part of the web application that runs on the user's device, such as
the browser. This is in contrast to server side, which refers to the part of the web application
that runs on the server.

----------------------------------------------------------------------------------
###JavaScript Variables
=================================================================================
JavaScript variables are used to store and manipulate data. 
They are created using three keywords
- let
- const
- var
 Variables created using let keyword:

 Syntax: 
 let variableName = value;

 - can be reassigned (values can be updated)
 - cannot be redeclared
 
 Variables using const keyword
 Syntax:
 const variableName = value;

  - cannot be reassigned
  - cannot be redeclared

  Variables using var keyword:
  Syntax:
  var variableName = value;

  - can be reassigned
  - can be redeclared
---------------------------------------------------------------------
###JavaScript Data Types
=================================================================================
JavaScript has several data types, including:
- Number: used to store numeric values
- String: used to store text values
- Boolean: used to store true or false values
- Null: used to store a value that represents the absence of any object value
- Undefined: used to store a value that has not been assigned a value
- Object: used to store collections of key-value pairs
- Array: used to store collections of values in a specific order
---------------------------------------------------------------------
###Operators in JavaScript
=================================================================================
JavaScript has several types of operators, including:
- Arithmetic operators: used to perform mathematical operations (e.g. +, -, \*, /)
- Assignment operators: used to assign values to variables (e.g. =, +=, -=,
\* =, /=, %=, etc.)
- Comparison operators: used to compare values (e.g. ==, !=, ===, !==,
<, >, <=, >=)
- Logical operators: used to combine conditional statements (e.g. &&, ||, !)
- Bitwise operators: used to perform bitwise operations (e.g. &, |, ^, ~
, <<, >>, >>>)
---------------------------------------------------------------------
###Control Structures in JavaScript
=================================================================================
Control structures in JavaScript are used to control the flow of a program's execution. They include:
- Conditional statements: used to execute different blocks of code based on a condition (e.g. if
else, switch)
- Loops: used to execute a block of code repeatedly (e.g. for, while,
do...while)
---------------------------------------------------------------------
Conditional statements
=================================================================================
- if statement: used to execute a block of code if a condition is true
- if...else statement: used to execute a block of code if a condition is true, and
another block of code if the condition is false
- switch statement: used to execute a block of code based on the value of a variable
- nested if-else : if-else inside if-else
- ifelse-if ladder: Multiple conditions are checked
if-else-if-else-if-else
---------------------------------------------------------------------
Loops:
=================================================================================
- for loop: used to execute a block of code repeatedly for a specified number of times
- while loop: used to execute a block of code repeatedly while a condition is true
- do...while loop: used to execute a block of code repeatedly while a condition is true
- for..in loop: used to interate through objects
- for..of loop: used to iterate through arrays (forEach - arrays)
---------------------------------------------------------------------
    Loops:
    =================================================================================
    While Loop:
    =================================================================================
    Syntax:
    initialisation
    while(condition){
      code to be executed
      increment/decrement
    }
    Workflow of while loop:
    1. Initialisation
    2. Condition is checked
    3. If condition is true then code inside the loop is executed
    4. Increment/decrement is done
    5. Condition is checked again
    6. Steps 3-5 are repeated until condition is false
    =================================================================================
    do while loop:
    =================================================================================
    Syntax:
    initialisation
    do{
      code to be executed
      increment/decrement
    }while(condition)

    Workflow
    1. Initialisation
    2. Code inside the loop is executed
    3. Increment/decrement is done
    4. Condition is checked
    5. Steps 2-4 are repeated until condition is false
    =================================================================================
    for loop:
    =================================================================================
    Syntax:
    for(initialisation; condition; increment/decrement){
      code to be executeds
    }
    Workflow
    1. Initialisation
    2. Condition is checked
    3. If condition is true then code inside the loop is executed
    4. Increment/decrement is done
    5. Condition is checked again
    6. Steps 3-5 are repeated until condition is false
    =================================================================================
  ---------------------------------------------------------------------------------------

Objects in JavaScript:
=================================================================================
Objects in JavaScript are collections of key-value pairs.
- Key is a string
- Value can be any data type
- Key-value pairs are enclosed in curly brackets
- Key-value pairs are separated by commas
- Key-value pairs are called properties
- Value of a property can be accessed using dot notation or bracket notation
- Bracket notation is used when key contains special characters or is a variable
- Object can be created using object literal syntax or object constructor syntax

Objects using object literals:
=================================================================================
Syntax:
let object_name = {
  key1: value1,
}
eg:
let person = {
  name: "John",
  age: 25,
  height: 5.5,
  weight: 60.06,
  address: {
    street: "123, main st",
    city: "New York",
    state: "NY",
    zip: "10001"
  },
  hobbies: ["reading", "swimming", "cycling"],
  isMarried: true,
}
----------------------------------------------------------------------------
Functions in Javascript:
=================================================================================
Functions in JavaScript are blocks of code that can be executed multiple times from different parts 
of the program.
- Functions can take arguments
- Functions can return values
- Functions can be defined using function declaration syntax or function expression syntax
- Functions can be called using function name or function reference

Types of functions:
 a. Based on parameters:
 - Non-parameterised functions:
   - Do not take in inputs while being called
   - Example: function greet() { 
      console.log("Hello, World!"); 
    }
  
  - Parameterised functions:
    - Take in inputs while being called
    - Example: function greet(name) {
      console.log("Hello, " + name + "!");
    }
  
b. Based on names:
  - Named functions:
    - Have a name
    - Can be called by name
    - Example: function greet() {
      console.log("Hello, World!");
    }

  - Anonymous function:
    - Do not have a name
    - Can be called using a reference (variable)
    - Example: let greet = function() {
      console.log("Hello, World!");
    }
  
  - Arrow function:
    - A concise way to write a function
    - Do not have a name and can be called using a reference
    - Example: let greet = () => {
        console.log("Hello, World!");
      }
  
----------------------------------------------------------------------------------------
BOM and DOM
=====================================================================================
- BOM (Browser Object Model):
  - Provides access to the browser's functionality
  - Provides functions and attributes for JavaScript to communicate with the browser
  - BOM is the top-level object in the browser's object hierarchy
  - BOM is accessed using the window object
  - BOM has the following properties and methods:
    - alert()
    - confirm()
    - prompt()
    - setTimeout()
    - setInterval()
  // Example: take user input from browser, show the output outside of the document
  
- DOM (Document Object Model):
  - It provides access to the current HTML page
  - It is a tree-like structure that represents the HTML document
  - DOM is accessed using the document object
  - DOM has the following properties and methods:
    - getElementById()
    - getElementsByClassName()
    - getElementsByTagName()
    - createElement()
    - appendChild()

    DOM TREE: (present inside the browser memory)
    It is a tree like representation of all the HTML elements
    It has the following properties:
    - Node
    - Element
    - Text
    - Comment

    DOM reads the html in node-object format and creates a dom tree out of it.
    DOM is used to manipulate the html elements in the browser.
    DOM is used to add, remove, modify the elements in the browser.


  -------Question:  Write a program to take in user input for content, font size, color of the
      font and display the data accordingly

-------------------------------------------------------------------------------------------
Event Handling in Javascript
=====================================================================================
  - Event handling is the process of detecting and responding to user interactions with a web page
  - Events are actions that occur when a user interacts with a web page, such as clicking a button
  - Event handling is used to create interactive web pages
  - There are two types of event handling in JavaScript:
  - Inline event handling: This is the most basic form of event handling. It involves writing the
  event handling code directly in the HTML element that triggers the event.
  - Event handling using JavaScript: This is the most common form of event handling. It involves
  writing the event handling code in a separate JavaScript file or in the HTML file using the
  script tag.
  - Event handling using JavaScript involves the following steps:
  1. Select the element that will trigger the event
  2. Add an event listener to the element
  3. Define the event handling function
  4. Attach the event handling function to the event listener
  - Event handling using JavaScript has the following advantages:
    - It allows for more flexibility and control over the event handling code
    - It allows for more complex event handling logic
    - It allows for event handling code to be reused across multiple elements
    - It allows for event handling code to be easily maintained and updated
  - Event handling using JavaScript has the following disadvantages:
    - It requires more code and complexity
    - It can be more difficult to debug
    - It can be more difficult to understand for beginners
  - Event handling using JavaScript has the following best practices:
    - Use event delegation to reduce the number of event listeners
    - Use event bubbling to simplify event handling code
    - Use event listeners to attach event handling functions to elements
    - Use event handling functions to handle events in a centralized location
 
------------------------------------------------------------------------------------------
Asynchronous Javascript
=====================================================================================
  - Asynchronous JavaScript is a programming paradigm that allows for the execution of multiple
  tasks concurrently, improving the responsiveness and performance of web applications.
  - Asynchronous JavaScript is used to handle tasks that take a long time to complete, such as
  network requests, database queries, and file uploads.
  - Asynchronous JavaScript is used to improve the user experience by allowing for the execution
  of multiple tasks concurrently, improving the responsiveness and performance of web applications.
  - Asynchronous Programming will execute multiple functions parallely
- Asynchronous JavaScript has the following advantages:
  - Improves the responsiveness and performance of web applications
  - Allows for the execution of multiple tasks concurrently
  - Improves the user experience
- Asynchronous JavaScript has the following disadvantages:
  - Can be difficult to understand and debug
  - Can be difficult to manage and maintain
  - Can lead to callback hell
- Asynchronous JavaScript has the following best practices:
  - Use callbacks to handle asynchronous tasks
  - Use promises to handle asynchronous tasks
  - Use async/await to handle asynchronous tasks


All synchronous functions will be executed first
Then all asynchronous functions will be executed

=================================================================================
Callbacks:
=================================================================================
- A callback is a function that is passed as an argument to another function, to be executed
later.
- Callbacks are used to handle asynchronous tasks, such as network requests, database
queries, and file uploads.
- Callbacks are used to improve the responsiveness and performance of web applications.
- Callbacks are used to handle errors and exceptions.
--------------------------------------------------------------------------------
Callback Hell:
- Callback hell is a situation where a function calls another function, which calls
another function, and so on, creating a long chain of callbacks.
- Callback hell can be difficult to understand and debug.
- Callback hell can lead to errors and exceptions.
- Callback hell can be avoided by using promises and async/await.
================================================================================
Promises:
=================================================================================
- A promise is a value that may not be available yet, but will be available at some point
- Promises are functions that determine the eventual completion of an asynchronous function
- Promises are used to handle asynchronous tasks, such as network requests, database
queries, and file uploads.
- Promises are used to improve the responsiveness and performance of web applications.
- Promises are used to handle errors and exceptions.

States of a promise object:
- Pending: Initial state, neither fulfilled nor rejected.
- Fulfilled: Successful, the promise has been resolved.
- Rejected: Failed, the promise has been rejected.
================================================================================
Async/Await:
=================================================================================
- Async/await is a syntax sugar for promises.
- It simplifies the syntax for promise
- Async/await is used to handle asynchronous tasks, such as network requests, database
queries, and file uploads.
- Async/await is used to improve the readability and maintainability of code.
- Async/await is used to handle errors and exceptions.

Async keyword:
- The async keyword is used to declare a function that returns a promise.
- The async keyword is used to enable the use of the await keyword inside the function.

Await keyword:
- The await keyword is used to pause the execution of a function until a promise is
resolved or rejected.
- The await keyword is used to handle the result of a promise.
- The await keyword is used to improve the readability and maintainability of code.
================================================================================
JSON
================================================================================
- JSON (JavaScript Object Notation) is a lightweight data interchange format.
- JSON is a text-based format that is easy to read and write.
- JSON is used to exchange data between web servers, web applications, and mobile apps.
- JSON is used to store and retrieve data in web applications.
- JSON is used to improve the performance and scalability of web applications.
-----------------
Convert JS object to json:
JSON.stringify(obj)
-----------------
Convert json to JS object:
JSON.parse(json)
------------------
Syntax:
let jsonData = "{
  "name" : "Anil",
  "age" : 25
  "address" : "India"
}"