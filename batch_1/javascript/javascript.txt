                                JavaScript
=================================================================================
JavaScript is a client side programming language

What is client side?
Client side refers to the part of the web application that runs on the user's device, such as
the browser. This is in contrast to server side, which refers to the part of the web application
that runs on the server.

----------------------------------------------------------------------------------
###JavaScript Variables
=================================================================================
JavaScript variables are used to store and manipulate data. 
They are created using three keywords
- let
- const
- var
 Variables created using let keyword:

 Syntax: 
 let variableName = value;

 - can be reassigned (values can be updated)
 - cannot be redeclared
 
 Variables using const keyword
 Syntax:
 const variableName = value;

  - cannot be reassigned
  - cannot be redeclared

  Variables using var keyword:
  Syntax:
  var variableName = value;

  - can be reassigned
  - can be redeclared
---------------------------------------------------------------------
###JavaScript Data Types
=================================================================================
JavaScript has several data types, including:
- Number: used to store numeric values
- String: used to store text values
- Boolean: used to store true or false values
- Null: used to store a value that represents the absence of any object value
- Undefined: used to store a value that has not been assigned a value
- Object: used to store collections of key-value pairs
- Array: used to store collections of values in a specific order
---------------------------------------------------------------------
###Operators in JavaScript
=================================================================================
JavaScript has several types of operators, including:
- Arithmetic operators: used to perform mathematical operations (e.g. +, -, \*, /)
- Assignment operators: used to assign values to variables (e.g. =, +=, -=,
\* =, /=, %=, etc.)
- Comparison operators: used to compare values (e.g. ==, !=, ===, !==,
<, >, <=, >=)
- Logical operators: used to combine conditional statements (e.g. &&, ||, !)
- Bitwise operators: used to perform bitwise operations (e.g. &, |, ^, ~
, <<, >>, >>>)
---------------------------------------------------------------------
###Control Structures in JavaScript
=================================================================================
Control structures in JavaScript are used to control the flow of a program's execution. They include:
- Conditional statements: used to execute different blocks of code based on a condition (e.g. if
else, switch)
- Loops: used to execute a block of code repeatedly (e.g. for, while,
do...while)
---------------------------------------------------------------------
Conditional statements
=================================================================================
- if statement: used to execute a block of code if a condition is true
- if...else statement: used to execute a block of code if a condition is true, and
another block of code if the condition is false
- switch statement: used to execute a block of code based on the value of a variable
- nested if-else : if-else inside if-else
- ifelse-if ladder: Multiple conditions are checked
if-else-if-else-if-else
---------------------------------------------------------------------
Loops:
=================================================================================
- for loop: used to execute a block of code repeatedly for a specified number of times
- while loop: used to execute a block of code repeatedly while a condition is true
- do...while loop: used to execute a block of code repeatedly while a condition is true
- for..in loop: used to interate through objects
- for..of loop: used to iterate through arrays (forEach - arrays)
---------------------------------------------------------------------
    Loops:
    =================================================================================
    While Loop:
    =================================================================================
    Syntax:
    initialisation
    while(condition){
      code to be executed
      increment/decrement
    }
    Workflow of while loop:
    1. Initialisation
    2. Condition is checked
    3. If condition is true then code inside the loop is executed
    4. Increment/decrement is done
    5. Condition is checked again
    6. Steps 3-5 are repeated until condition is false
    =================================================================================
    do while loop:
    =================================================================================
    Syntax:
    initialisation
    do{
      code to be executed
      increment/decrement
    }while(condition)

    Workflow
    1. Initialisation
    2. Code inside the loop is executed
    3. Increment/decrement is done
    4. Condition is checked
    5. Steps 2-4 are repeated until condition is false
    =================================================================================
    for loop:
    =================================================================================
    Syntax:
    for(initialisation; condition; increment/decrement){
      code to be executeds
    }
    Workflow
    1. Initialisation
    2. Condition is checked
    3. If condition is true then code inside the loop is executed
    4. Increment/decrement is done
    5. Condition is checked again
    6. Steps 3-5 are repeated until condition is false
    =================================================================================
  ---------------------------------------------------------------------------------------

Objects in JavaScript:
=================================================================================
Objects in JavaScript are collections of key-value pairs.
- Key is a string
- Value can be any data type
- Key-value pairs are enclosed in curly brackets
- Key-value pairs are separated by commas
- Key-value pairs are called properties
- Value of a property can be accessed using dot notation or bracket notation
- Bracket notation is used when key contains special characters or is a variable
- Object can be created using object literal syntax or object constructor syntax

Objects using object literals:
=================================================================================
Syntax:
let object_name = {
  key1: value1,
}
eg:
let person = {
  name: "John",
  age: 25,
  height: 5.5,
  weight: 60.06,
  address: {
    street: "123, main st",
    city: "New York",
    state: "NY",
    zip: "10001"
  },
  hobbies: ["reading", "swimming", "cycling"],
  isMarried: true,
}
----------------------------------------------------------------------------
Functions in Javascript:
=================================================================================
Functions in JavaScript are blocks of code that can be executed multiple times from different parts of the program.
- Functions can take arguments
- Functions can return values
- Functions can be defined using function declaration syntax or function expression syntax
- Functions can be called using function name or function reference

Types of functions:
 a. Based on parameters:
 - Non-parameterised functions:
   - Do not take in inputs while being called
   - Example: function greet() { 
      console.log("Hello, World!"); 
    }
  
  - Parameterised functions:
    - Take in inputs while being called
    - Example: function greet(name) {
      console.log("Hello, " + name + "!");
    }
  
b. Based on names:
  - Named functions:
    - Have a name
    - Can be called by name
    - Example: function greet() {
      console.log("Hello, World!");
    }

  - Anonymous function:
    - Do not have a name
    - Can be called using a reference (variable)
    - Example: let greet = function() {
      console.log("Hello, World!");
    }
  
  - Arrow function:
    - A concise way to write a function
    - Do not have a name and can be called using a reference
    - Example: let greet = () => {
        console.log("Hello, World!");
      }
  
----------------------------------------------------------------------------------------
BOM and DOM
=====================================================================================
- BOM (Browser Object Model):
  - Provides access to the browser's functionality
  - Provides functions and attributes for JavaScript to communicate with the browser
  - BOM is the top-level object in the browser's object hierarchy
  - BOM is accessed using the window object
  - BOM has the following properties and methods:
    - alert()
    - confirm()
    - prompt()
    - setTimeout()
    - setInterval()

- DOM (Document Object Model):
  - It provides access to the current the HTML page
  - It is a tree-like structure that represents the HTML document
  - DOM is accessed using the document object
  - DOM has the following properties and methods:
    - getElementById()
    - getElementsByClassName()
    - getElementsByTagName()
    - createElement()
    - appendChild()
  -------Question:  Write a program to take in user input for content, font size, color of the
      font and display the data accordingly