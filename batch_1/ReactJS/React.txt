======================================================================================
                                    React JS
======================================================================================
What is React JS?
=====================================
React JS is a JavaScript library for building user interfaces. 
It's used for creating reusable UI components and managing the state changes of these components. 
React is a popular choice for building complex, data-driven applications.

What is a components?
=====================================
A component is a small, reusable piece of code that represents a UI element, such as a button
or a form. Components can be combined to create more complex UI elements, such as a navigation bar
or a dashboard.

Types of components:
======================
1. Functional Components: These are the simplest type of component. They are defined as a function
which returns 1 html element at a time
2. Class Components: These are more complex and are defined as a class which extends React.Component
class and has a render() which returns 1 html elements at a time.
-------------------------------
Functional Component:
---------------------
Steps to create a functional component-
1. Import React
2. Define a function
3. Use the function to return JSX
4. Export the function as a component
5. Call the function in App.jsx
-----------
What is JSX?
=====================================
JSX is a syntax extension for JavaScript that allows you to write HTML-like code in your JavaScript files
--------------------------------------------------------------------------------------------------------
Components in React
======================
Components are the building blocks of React applications. 
They are reusable pieces of code that represent UI elements.

Components are of two types:
1. Functional Components
2. Class Components

Functional Component: 
---------------------
A functional component is a simple function that returns JSX.
It does not have its own state and does not have lifecycle methods.

Steps to create a functional component:
1. Import React
2. Define a function
3. Use the function to return JSX
4. Export the function as a component
5. Call the function in App.jsx
----------------------------
Class Components:
-------------------
A class component is a class that extends(inherit) React.Component.
It has its own state and lifecycle methods.
It has a render function which returns a jsx
-------------
State in React
=====================
State is an object that stores the data of a component.
It is used to store the data that changes over time.
It is defined in the constructor
Eg: 
constructor(props){
    super(props);
    this.state = {
        name: 'John',
        age: 25
    }
}

Props:
------
Props are short for properties. They are immutable objects that are passed to a component from its parent.
They are used to pass data from a parent component to a child component.
They are passed in key=value pairs
Eg:
<MyFunc1 name="John" age="25" />
---------------------------------------------------------------------------------------------
Event Handling in ReactJS
==========================
Click Event in React:
-------------------
To handle a click event in React, we use the onClick event handler.
Eg:
<button onClick={this.handleClick}>Click me</button>

Click event in a functional component
--------------------------------
To handle a click event in a functional component, we use the onClick event handler.
Eg:
import React from "react";

function FuncClick() {
  const handleClick = () => {
    let h1 = document.getElementById("h1");
    h1.innerHTML =
      "Hello my name is Rajath and I am 30 years old and I am a professor";
  };
  return (
    <div>
      <h1 id="h1">
        Hello my name is Rohan and I am 10 years old and I am a student
      </h1>
      <button onClick={handleClick}>Change Output</button>
    </div>
  );
}

export default FuncClick;
---------------------------------------------
Click Event in ClassComponent
--------------------------------
To handle a click event in a class component, we use the onClick event handler.

import React, { Component } from "react";

class ClassClick extends Component {
  handleClick = () => {
    let h3Ele = document.getElementById("h3");
    h3Ele.innerHTML =
      "Hello my name is Suraj and I am 35 years old and I am a sportsman";
  };
  render() {
    return (
      <div>
        <h3 id="h3">
          Hello my name is Manoj and I am 25 years old and I am a student
        </h3>
        <button onClick={this.handleClick}>Change Output</button>
      </div>
    );
  }
}

export default ClassClick;
----------------------------------------------------------------------------
State Management in React:
--------------------------------
State is an object that stores the data and properties of the component. It can be changed during the
course of time

setState():
----------------
The setState() method is used to update the state of a component. It takes an object as an
argument and updates the state with the new values.
-----------------------------------------------------------------------------------------------
================================================================================================
State in Functional Component:
--------------------------------
To manage state in a functional component, we use the useState hook.
useState Hook:
----------------
The useState hook is used to add state to a functional component. It returns an array with two
elements: the current state value and a function to update the state.

Hook in react:
----------------
Hooks are a new addition to React in version 16.8. They allow you to use state
and other React features without writing a class.
Hooks help us to use class based features in a functional component 